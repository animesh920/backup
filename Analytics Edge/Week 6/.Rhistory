apply(subset(emailSparse,spam==1),MARGIN = 2,FUN = sum)
apply(subset(emailSparse,spam==1),MARGIN = 2,FUN = sum)>1000
sum(apply(subset(emailSparse,spam==1),MARGIN = 2,FUN = sum)>1000)
View(emailSparse)
sort(colSums(subset(emailsSparse, spam == 1)))
sort(colSums(subset(emailSparse, spam == 1)))
library9dplyr
library(dplyr)
emailSparse=mutate(emailSparse,spam=as.factor(spam))
set.seed(123)
library("caTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
smp=sample.split(emailSparse$spam,SplitRatio = 0.7)
train=subet(emailSparse,smp==TRUE)
train=subset(emailSparse,smp==TRUE)
test=subset(emailSparse,smp!=TRUE)
log.model=glm(spam~.,data=train,family="binomial")
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rpart.plot", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
tree.model=rpart(spam~.,data=train,method="class")
library("randomForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rf.model=randomForest(spam~.,data=train)
which(colnames(emailSparse)=="spam")
row.names(emailSparse)=NULL
View(emailSparse)
View(emailSparse)
colnames(emailSparse)
rf.model=randomForest(spam~.,data=train)
rf.model=randomForest(spam~-000.,data=train)
str(emailSparse)
pred.log=predict(log.model,newdata = train,type = "prob")
pred.log=predict(log.model,newdata = train)
pred.log
pred.log=predict(log.model,newdata = train,type="response")
pred.log
sum(pred.log<0.00001)
sum(pred.log>0.99999)
summary(log.model)
prp(tree.model)
4000/4010
predROCR=prediction(pred.log,train$spam)
library("ROCR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
predROCR=prediction(pred.log,train$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
performance(predROCR, "auc")@y.values     #extract "auc" from the performance object and get @y.values as the auc
pred.tree=predict(tree.model,newdata = train)
pred.tree
table(train$spam,pred.tree[,2]>0.5)
3779/4010
predROCR=prediction(pred.tree[,2],train$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
performance(predROCR, "auc")@y.values     #extract "auc" from the performance object and get @y.values as the auc
set.seed(123)
rf.model=randomForest(spam~.,data=train)
View(train)
pred.test=predict(log.model,newdata = test,type="response")
table(test$spam,pred.test>0.5)
1633/1718
predROCR=prediction(pred.test,train$spam)
predROCR=prediction(pred.test,test$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
performance(predROCR, "auc")@y.values     #extract "auc" from the performance object and get @y.values as the auc
pred.test=predict(tree.model,newdata = test)
table(test$spam,pred.test[,2]>0.5)
1614/1710
predROCR = prediction(pred.test[,2], test$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
performance(predROCR, "auc")@y.values
wordCount=rowsum(as.matrix(dtm))
wordCount = rowSums(as.matrix(dtm))
karthik2 <- read.csv("~/Downloads/karthik2.csv")
View(karthik2)
library(ggplot2)
qplot(karthik2$temp)
qplot(1:453,karthik2$temp)
qplot(1:100,karthik2$temp[1:100])
qplot(1:100,karthik2$temp[1:100],"b+")
max(karthik2$temp)
median(karthik2$temp)
ggplot(data=karthik2,aes(x=1:100,y=karthik2$temp[1:100]))+geom_line()
ggplot(data=karthik2,aes(x=1:453,y=karthik2$temp))+geom_line()
ggplot(data=karthik2,aes(x=1:100,y=karthik2$temp[1:100]))+geom_line()
karthik2$temp[1:100]
1:100
ggplot(data=karthik2,aes(x=1:100,y=karthik2$temp[1:100]))+geom_line()
ggplot(data=karthik2[1:100,],aes(x=1:100,y=temp))+geom_line()
ggplot(data=karthik2[1:100,],aes(x=1:100,y=temp))+geom_abline()
ggplot(data=karthik2[1:100,],aes(x=1:100,y=temp))+geom_line()
which.max(karthik2$temp)
ggplot(data=karthik2[1:100,],aes(x=1:100,y=temp))
ggplot(data=karthik2[1:100,],aes(x=1:100,y=temp))+geom_line()
ggplot(data=karthik2[1:100,],aes(x=1:100,y=c(temp,total_users))+geom_line()
)))))
ggplot(data=karthik2[1:100,],aes(x=1:100,y=temp))+geom_line()
ggplot(data=karthik2[1:100,],aes(x=1:100,y=temp,col="red"))+geom_line()
rm(karthik2)
setwd("~/Documents/Analytics Edge/Week 6")
dailykos <- read.csv("~/Documents/Analytics Edge/Week 6/Assignment/dailykos.csv")
View(dailykos)
distances=dist(dailykos,method="euclidean")
kos_hclust=kosHierClust = hclust(distances, method="ward.D")
plot(kos_hclust)
clusterGroups=cutree(kos_hclust,k=7)
nrow(subset(dailykos,clusterGroups==3))
tapply(dailykos,clusterGroups,nrow)
library(dplyr)
df=group_by(dailykos,clusterGroups)%>%summarise(total=length(abc))
tapply(dailykos$abc,clusterGroups,length)
which.max(tapply(dailykos$abc,clusterGroups,length))
which.min(tapply(dailykos$abc,clusterGroups,length))
tail(sort(colMeans(subset(dailykos,clusterGroups==1))))
tail(sort(colMeans(subset(dailykos,clusterGroups==2))))
tail(sort(colMeans(subset(dailykos,clusterGroups==3))))
tail(sort(colMeans(subset(dailykos,clusterGroups==4))))
tail(sort(colMeans(subset(dailykos,clusterGroups==5))))
tail(sort(colMeans(subset(dailykos,clusterGroups==6))))
tail(sort(colMeans(subset(dailykos,clusterGroups==7))))
tail(sort(colMeans(subset(dailykos,clusterGroups==1))))
tail(sort(colMeans(subset(dailykos,clusterGroups==2))))
tail(sort(colMeans(subset(dailykos,clusterGroups==3))))
tail(sort(colMeans(subset(dailykos,clusterGroups==4))))
tail(sort(colMeans(subset(dailykos,clusterGroups==6))))
tail(sort(colMeans(subset(dailykos,clusterGroups==67)))
tail(sort(colMeans(subset(dailykos,clusterGroups==7)))
tail(sort(colMeans(subset(dailykos,clusterGroups==7)))
))))
tail(sort(colMeans(subset(dailykos,clusterGroups==7))))
k_cluster=kmeans(distances,centers = 7)
subset(dailykos,k_cluster==3)
k_cluster
k_cluster==3
k_cluster$cluster
k_cluster$cluster==3
subset(dailykos,k_cluster$cluster==3)
nrow(subset(dailykos,k_cluster$cluster==3))
tapply(dailykos,k_cluster$cluster,nrow)
tapply(dailykos$abc,k_cluster$cluster,length)
which.max(tapply(dailykos$abc,k_cluster$cluster,length))
which.min(tapply(dailykos$abc,k_cluster$cluster,length))
set.seed(1000)
k_cluster=kmeans(distances,centers = 7)
tapply(dailykos$abc,k_cluster$cluster,length)
which.min(tapply(dailykos$abc,k_cluster$cluster,length))
tapply(dailykos$abc,k_cluster$cluster,length)
set.seed(1000)
kmc=kmeans(dailykos,centers = 7)
spl=split(dailykos,kmc$cluster)
spl[[1]]
dim(spl[[1]])
lapply(spl,dim)
lapply(spl,colMeans)
lapply(spl,tail(sort(colMeans)))
lapply(spl,colMeans)
lapply(lapply(lapply(spl,colMeans),sort),tail)
table(kos_hclust$labels)
table(clusterGroups,kmc$cluster)
rm(list=ls())
air <- read.csv("~/Documents/Analytics Edge/Week 6/Assignment/AirlinesCluster.csv")
View(air)
apply(air,MARGIN = 2,mean)
sort(apply(air,MARGIN = 2,mean))
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
prepoc=preProcess(air)
names(prepoc)
prepoc$pcaComp
predict(prepoc,pcaComp)
predict(prepoc,air)
air_norm=predict(prepoc,air)
apply(air_norm,MARGIN = 2,min)
which.min(apply(air_norm,MARGIN = 2,min))
which.max(apply(air_norm,MARGIN = 2,max))
distances=dist(air_norm,method="euclidean")
air_cluster=hclust(distances)
plot(air_cluster)
air_cluster=hclust(distances,method = "ward")
air_cluster=hclust(distances,method = "ward.D")
plot(air_cluster)
air_cluster1=cutree(air_cluster,k = 5)
sum(air_cluster1==1)
lapply(split(air_norm,f = air_cluster1),max)
(split(air_norm,f = air_cluster1)
)
(split(air_norm,f = air_cluster1))
(split(air_norm,f = air_cluster1))[[1]]
(split(air_norm,f = air_cluster1))[[2]]
apply((split(air_norm,f = air_cluster1))[[2]],MARGIN = 2,FUN = max)
apply((split(air_norm,f = air_cluster1))[[1]],MARGIN = 2,FUN = max)
apply((split(air_norm,f = air_cluster1))[[3]],MARGIN = 2,FUN = max)
apply((split(air_norm,f = air_cluster1))[[4]],MARGIN = 2,FUN = max)
apply((split(air_norm,f = air_cluster1))[[5]],MARGIN = 2,FUN = max)
lapply((split(air_norm,f = air_cluster1))FUN = colMeans)
lapply((split(air_norm,f = air_cluster1)),FUN = colMeans)
set.seed(88)
kmc=kmeans(air_norm,centers = 5,iter.max = 1000)
kmc$cluster
tapply(air_norm$Balance,kmc$cluster,length)
kmc$centers
air_hclust=hclust(distances,method = "ward.D")
air_hclust=cutree(air_hclust,k=5)
subset(air_norm,air_hclust==1)
apply(subset(air_norm,air_hclust==1),MARGIN = 2,FUN = colMeans)
apply(air_norm,MARGIN = 2,FUN = colMeans)
apply(air_norm,MARGIN = 2,FUN = max)
apply(subset(air_norm,air_hclust==1),MARGIN = 2,FUN = colMeans))
apply(subset(air_norm,air_hclust==1),MARGIN = 2,FUN = colMeans)
temp=subset(air_norm,air_hclust==1)
apply(temp,MARGIN = 2,FUN = colMeans)
apply(air_norm,MARGIN = 2,FUN = colMeans)
apply(air_norm,MARGIN = 2,FUN = mean)
apply(air_norm,MARGIN = 2,FUN = sum)
air_norm
table(kmc$cluster)
table(kmc$cluster[1])
table(air_hclust,kmc$cluster)
rm(list=ls())
stocks <- read.csv("~/Documents/Analytics Edge/Week 6/Assignment/StocksCluster.csv")
View(stocks)
table(stocks$PositiveDec)
6324/11580
cor(stocks[,-12])
apply(cor(stocks[,-12]),MARGIN = 2,FUN = max)
apply(cor(stocks[,-12]),MARGIN = 2,FUN = head(2))
apply(cor(stocks[,-12]),MARGIN = 2,FUN = sort)
milestone <- read.csv("~/Desktop/milestone.csv", stringsAsFactors=FALSE)
View(milestone)
last_two <- read.csv("~/Desktop/last_two.csv", stringsAsFactors=FALSE)
View(last_two)
final=merge(last_two,milestone,by = "uid")
final=merge(last_two,milestone,by = "milestone")
View(final)
final=merge(last_two,milestone,by.x = "milestone",by.y = "milestone")
library(sqldf)
merge(last_two,milestone,by.x = "milestone",by.y = "milestone_id")
final=merge(last_two,milestone,by.x = "milestone",by.y = "milestone_id")
View(final)
library(dplyr)
arrange(final,milestone)
colnames(final)[4]="milestone_number"
View(final)
arrange(final,milestone_number)
final=arrange(final,milestone_number)
View(final)
conversion <- read.csv("~/Desktop/conversion.csv", stringsAsFactors=FALSE)
View(conversion)
cumsum(conversion$total)
conversion=arrange(conversion,max_milestone)
View(conversion)
conversion=arrange(conversion,desc max_milestone)
conversion=arrange(conversion,desc(max_milestone))
View(conversion)
cumsum(conversion$total)
5126/5192
conversion <- read.csv("~/Desktop/conversion.csv")
View(conversion)
conversion=arrange(conversion,desc(max_milestone))
cumsum(conversion$total)
View(conversion)
546/611
conversion=mutate(conversion,cumulative=cumsum(conversion$total))%>%arrage(max_milestone)
conversion=mutate(conversion,cumulative=cumsum(conversion$total))%>%arrange(max_milestone)
View(conversion)
mutate(conversion,temp=c(0,conversion$cumulative[2:48]/conversion$cumulative[1:47]))
conversion=mutate(conversion,temp=c(0,conversion$cumulative[2:48]/conversion$cumulative[1:47]))
View(conversion)
apply(stocks,2,mean)
colnames[which.max(apply(stocks,2,mean))]
colnames(stocks)[which.max(apply(stocks,2,mean))]
colnames(stocks)[which.max(apply(stocks[,-12],2,mean))]
colnames(stocks)[which.min(apply(stocks[,-12],2,mean))]
set.seed(123)
set.seed(144)
library("caTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
spl=sample.split(stocks$PositiveDec,SplitRatio = 0.7)
train=subset(stocks,spl==TRUE)
test=subset(stocks,spl!=TRUE)
StocksModel=glm(PositiveDec~.,data=train,family="binomial")
names(StocksModel)
table(train$PositiveDec,predict(StocksModel,newdata = train,type = "response")>0.5)
4630/8106
table(test$PositiveDec,predict(StocksModel,newdata = test,type = "response")>0.5)
1970/3474
table(test$PositiveDec)
1897/3474
limited_train=train
limited_test=test
limited_train$PositiveDec=NULL
limited_test$PositiveDec=NULL
library(Caret)
library(caret)
prepoc=preProcess(limited_train)
norm_train=predict(prepoc,limited_train)
View(norm_train)
norm_test=predict(prepoc,limited_test)
mean(norm_test$ReturnJan)
set.seed(144)
km=kmeans(norm_train,centers = 3)
km$cluster
tapply(norm_train$ReturnJan,km$cluster,length)
install.packages("flexclust")
library("flexclust", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
km.kcca=as.kcca(km,norm_train)
cluster_train=predict(km.kcca)
cluster_test=predict(km.kcca,newdata = norm_test)
cluster_test
table(cluster_test)
stock_train1=subset(train,cluster_train==1)
stock_train2=subset(train,cluster_train==2)
stock_train3=subset(train,cluster_train==3)
stock_test1=subset(test,cluster_test==1)
stock_test2=subset(test,cluster_test==2)
stock_test3=subset(test,cluster_test==3)
mean(stock_train1)
mean(stock_train1$PositiveDec)
mean(stock_train2$PositiveDec)
mean(stock_train3$PositiveDec)
stock_model1=glm(PositiveDec~.,data=stock_train1,family="binomial")
stock_model2=glm(PositiveDec~.,data=stock_train2,family="binomial")
stock_model3=glm(PositiveDec~.,data=stock_train3,family="binomial")
summary(stock_model1)
names(stock_model1)
summary(stock_model1)
table(stock_test1$PositiveDec,predict(stock_model1,newdata = stock_test1,type="response")>0.5)
804/1298
table(stock_test2$PositiveDec,predict(stock_model2,newdata = stock_test2,type="response")>0.5)
1145/2080
table(stock_test3$PositiveDec,predict(stock_model3,newdata = stock_test3,type="response")>0.5)
62/96
pred3=predict(stock_model3,newdata = stock_test3,type="response")>0.5
pred2=predict(stock_model2,newdata = stock_test2,type="response")>0.5
pred1=predict(stock_model1,newdata = stock_test1,type="response")>0.5
all=c(pred1,pred2,pred3)
all_y=c(stock_test1$PositiveDec,stock_test2$PositiveDec,stock_test3$PositiveDec)
table(all_y,all)
2011/(2011+1110+353)
names(stock_model1)
stock_model1$coefficients
df=data.frame(stock_model1$coefficients,stock_model2$coefficients,stock_model3$coefficients)
View(df)
rm(stock_model1,stock_model2,stock_model3,stock_test1,stock_test2,stock_test3)
rm(limited_test,limited_train)
rm(stock_train1,stock_train2,stock_train3,stocks)
rm(df,norm_test,norm_train,train,test)
View(conversion)
colnames(conversion)[4]="conversion"
View(conversion)
write.csv(conversion"new_conversion.csv",row.names=F)
write.csv(conversion,"new_conversion.csv",row.names=F)
sq_rank <- read.csv("~/sq_rank.txt", header=FALSE)
View(sq_rank)
tail(sq_rank)
tail(sq_rank,n = 20)
tail(sq_rank,n = 30)
temp=sq_rank[8914:8938,]
View(temp)
View(temp)
View(temp)
temp$V3=NULL
View(temp)
mutate(temp)
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
temp=mutate(temp,date_time=ymd_hms(V1))
View(temp)
str(temp)
conversion <- read.csv("~/Desktop/conversion.csv")
View(conversion)
temp1=arrange(conversion,desc(max_milestone))%>%mutate(cum=c(0,cumsum(total)))
cumsum(conversion$total)
length(cumsum(conversion$total))
temp1=arrange(conversion,desc(max_milestone))%>%mutate(cum=cumsum(total)))
temp1=arrange(conversion,desc(max_milestone))%>%mutate(cum=cumsum(total))
View(temp1)
temp1=arrange(conversion,desc(max_milestone))%>%mutate(cum=cumsum(total))%>%arrange(max_milestone)
View(temp1)
temp1=arrange(conversion,desc(max_milestone))%>%mutate(cum=cumsum(total))%>%arrange(max_milestone)%>%mutate(conv=c(0,cum[2:51],cum[1:50]))
temp1=arrange(conversion,desc(max_milestone))%>%mutate(cum=cumsum(total))%>%arrange(max_milestone)%>%mutate(conv=c(0,cum[2:51]/cum[1:50]))
View(temp1)
sq_rank <- read.csv("~/sq_rank.txt", header=FALSE, stringsAsFactors=FALSE)
View(sq_rank)
sq_rank$V3=NULL
temp=sq_rank[8914:8938,]
View(temp)
mutate(temp,dt=ymd_hms(V1))
mutate(temp,dt=ymd_hms(as.Date(V1)))
mutate(temp,dt=mdy_hms(V1))
temp=mutate(temp,dt=mdy_hms(V1))
View(temp)
library(ggplot2)
qplot(dt,V2,data=temp)
colnames(temp)[2]="rank"
View(temp)
qplot(dt,rank,data=temp)
rm(list=ls())
user_info <- read.csv("~/Desktop/user_info.csv")
View(user_info)
rm(user_info)
user_info <- read.csv("~/Desktop/user_info.csv", stringsAsFactors=FALSE)
View(user_info)
user_gs <- read.csv("~/Desktop/user_gs.csv", stringsAsFactors=FALSE)
View(user_info)
View(user_gs)
user_game <- read.csv("~/Desktop/user_game.csv", stringsAsFactors=FALSE)
View(user_info)
credits <- read.csv("~/Desktop/credits.csv", stringsAsFactors=FALSE)
View(user_info)
final=merge(user_game,user_gs,by = "uid")
final=merge(final,user_info,by="uid")
View(final)
table(final$gender)
table(final$country)
is.null(final)
is.null(final$gender)
temp=final$uid %in% credits$uid
temp
total=rep(0,948157)
total[temp]=credits$total
sum(temp)
temp=final$uid %in% credits$uid
final1=merge(final,credits,by="uid",by.x = T)
View(credits)
final1=sqldf("select * from final where gender like 'f%' or gender like 'm%' ")
View(final1)
final1=sqldf("select * from final1 where country in ('United States','United Kingdom','Germany','Canada','Australia') ")
View(final1)
merge(final1,credits,by = "uid",all.x = TRUE)
final2=merge(final1,credits,by = "uid",all.x = TRUE)
View(final2)
is.na(final2$total)
final2$total[is.na(final2$total)]=0
View(final2)
sum(final2$total)
final2$total!=0
sum(final2$total!=0)
rm(credits,user_gs,user_info,user_game)
View(final2)
ifelse(2>0,TRUE,FLASE)
ifelse(2<0,TRUE,FLASE)
ifelse(2<0,TRUE,FALSE)
ifelse(1:10<0,TRUE,FALSE)
ifelse(1:10>0,TRUE,FALSE)
View(final2)
final2=mutate(final2,high_pay_user=ifelse(total>=0.5,1,0))
View(final2)
table(final2$high_pay_user)
spl=sample.split(final2$high_pay_user,SplitRatio = 0.7)
train=subset(final2,spl==TRUE)
test=subset(final2,spl!=TRUE)
library(rpart)
library(rpart.plot)
library(caret)
tarin_fn=trainControl(method="cv",number = 10)
cpGrid=expand.grid( .cp = seq(0.01,0.5,0.01))
train_data=subset(final2,spl==TRUE)
test_data=subset(final2,spl!=TRUE)
rm(train,test)
train_fn=trainControl(method="cv",number = 10)
cpGrid=expand.grid( .cp = seq(0.01,0.5,0.01))
train(high_pay_user~.-total-uid,data=train_data,trControl = train_fn,tuneGrid = cpGrid,metric="Kappa")
str(final2)
final2=mutate(final2,high_pay_user=as.factor(high_pay_user))
train_data=subset(final2,spl==TRUE)
test_data=subset(final2,spl!=TRUE)
train_fn=trainControl(method="cv",number = 10)
cpGrid=expand.grid( .cp = seq(0.01,0.5,0.01))
train(high_pay_user~.-total-uid,data=train_data,trControl = train_fn,tuneGrid = cpGrid,metric="Kappa")
train(high_pay_user~.-total-uid,data=train_data,trControl = train_fn,metric="Kappa")
train(high_pay_user~.-total-uid,data=train_data,merhod="rpart",trControl = train_fn,metric="Kappa")
train(high_pay_user~.-total-uid,data=train_data,method="rpart",trControl = train_fn,metric="Kappa")
payer_tree=raprt(high_pay_user~.-total-uid,data=train_data, cp=7.27e-05)
payer_tree=rpart(high_pay_user~.-total-uid,data=train_data, cp=7.27e-05)
prp(payer_tree)
payer_tree=rpart(high_pay_user~.-total-uid,data=train_data, cp=2.18e-04)
prp(payer_tree)
payer_tree=rpart(high_pay_user~.-total-uid,data=train_data, cp=2.18e-02)
prp(payer_tree)
payer_tree=rpart(high_pay_user~.-total-uid,data=train_data, cp=2.18e-03)
prp(payer_tree)
payer_tree=rpart(high_pay_user~.-total-uid,data=train_data, cp=2.18e-04)
prp(payer_tree)
pred=predict(payer_tree,newdata = test_data)
pred
pred[,2]
table(test_data$high_pay_user,pred[,2]>0.1)
table(test_data$high_pay_user,pred[,2]>0.01)
table(test_data$high_pay_user,pred[,2]>0.001)
table(test_data$high_pay_user,pred[,2]>0.01)
logit.model=glm(high_pay_user~.-total-uid,data=train_data,family = "binomial")
table(test_data$high_pay_user,predict(logit.model,newdata=test_data,type="response")>0.5)
table(test_data$high_pay_user,predict(logit.model,newdata=test_data,type="response")>0.2)
table(test_data$high_pay_user,predict(logit.model,newdata=test_data,type="response")>0.01)
table(test_data$high_pay_user,predict(logit.model,newdata=test_data,type="response")>0.001)
table(test_data$high_pay_user,predict(logit.model,newdata=test_data,type="response")>0.01)
table(test_data$high_pay_user,predict(logit.model,newdata=test_data,type="response")>0.005)
table(test_data$high_pay_user,predict(logit.model,newdata=test_data,type="response")>0.01)
table(test_data$high_pay_user,predict(logit.model,newdata=test_data,type="response")>0.1)
View(final2)
predict(logit.model,newdata=final2[,c(2,3,4,5,6,8)])
summary(logit.model)
predict(logit.model,newdata=final2[,c(2,3,4,5,6,8)])
predict(logit.model,newdata=final2,type="response")
table(test_data$high_pay_user,predict(logit.model,newdata=test_data,type="response")>0.1)
table(test_data$high_pay_user,predict(logit.model,newdata=test_data,type="response")>0.01)
table(test_data$high_pay_user,predict(logit.model,newdata=test_data,type="response")>0.007)
table(test_data$high_pay_user,predict(logit.model,newdata=test_data,type="response")>0.01)
pred=predict(logit.model,newdata=final2,type="response")
filter(final2,total==0,as.logical(pred>0.01))
filter(final2,total==0,as.logical(pred>0.01))$uid
payers=filter(final2,total==0,as.logical(pred>0.01))$uid
payers[1:10]
filter(final2,uid==108199)
payers=data.frame(payers)
View(payers)
View(final2)
write.csv(payers,"prespective_payers.csv",row.names=F)
