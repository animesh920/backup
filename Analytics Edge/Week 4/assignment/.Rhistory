rank2$pred=predict(rfFit1,newdata=rank2)
View(rank2)
View(rank2)
predict(rfFit1,newdata=as.data.frame(Cumulative.Rating=4.3,current_user_installs=31000,total_user_installs=90000)
)
as.data.frame(Cumulative.Rating=4.3,current_user_installs=31000,total_user_installs=90000)
as.data.frame(c(4.3,31000,90000),row.names=c(Cumulative.Rating,current_user_installs,total_user_installs)
)
as.data.frame(c(4.3,31000,90000))
as.data.frame(c(4.3,31000,90000),row.names=c(Cumulative.Rating,current_user_installs,total_user_installs))
Cumulative.Rating=4.3
current_user_installs=31000
total_user_installs=90000
as.data.frame(Cumulative.Rating,current_user_installs,total_user_installs)
data.frame(Cumulative.Rating,current_user_installs,total_user_installs)
predict(rfFit1,newdata=data.frame(Cumulative.Rating=4.3,current_user_installs=31000,total_user_installs=90000)
)
predict(rfFit1,newdata=data.frame(Cumulative.Rating=4.3,current_user_installs=40000,total_user_installs=90000))
predict(rfFit1,newdata=data.frame(Cumulative.Rating=4.3,current_user_installs=50000,total_user_installs=90000))
predict(rfFit1,newdata=data.frame(Cumulative.Rating=4.3,current_user_installs=35000,total_user_installs=90000))
predict(rfFit1,newdata=data.frame(Cumulative.Rating=4.3,current_user_installs=31000,total_user_installs=90000))
predict(rfFit1,newdata=data.frame(Cumulative.Rating=4.3,current_user_installs=31000,total_user_installs=100000))
predict(rfFit1,newdata=data.frame(Cumulative.Rating=4.9,current_user_installs=31000,total_user_installs=100000))
predict(rfFit1,newdata=data.frame(Cumulative.Rating=4.9,current_user_installs=310000,total_user_installs=100000))
predict(rfFit1,newdata=data.frame(Cumulative.Rating=4.9,current_user_installs=3100000,total_user_installs=100000))
lm(rank2$pred,rank2$current_user_installs)
lm(rank2$pred~rank2$current_user_installs)
f8=dbConnect(MySQL(),user="sudokuphp",password="successlist",host="192.168.1.123",dbname="f8sudokuquest")
nonf8=dbConnect(MySQL(),user="sudokuphp",password="successlist",host="192.168.1.123",dbname="nonf8sudokuquest")
query=dbSendQuery(f8,"select uid,country,source,starttime from user_info")
dataf8=fetch(query,n=-1)
query=dbSendQuery(nonf8,"select uid,country,source,starttime from user_info")
datanonf8=fetch(query,n=-1)
final=rbind(dataf8,datanonf8)
View(final)
dbWriteTable(nonf8,name = "user_info_combined",value = final)
write.csv(final,"combined_user_info.csv",row.names=F)
dbWriteTable(nonf8,name = "user_info_combined",value = final)
dbClearResult(dbListResults(nonf8)[[1]])
dbWriteTable(nonf8,name = "user_info_combined",value = final)
dbClearResult(dbListResults(f8)[[1]])
dbWriteTable(f8,name = "user_info_combined",value = final)
temp_venn <- read.csv("~/Desktop/temp_venn.csv")
View(temp_venn)
library(dplyr)
temp$device %like% 'ip'
grep('ip',temp$device)
grepl('ip',temp$device)
grepl('iph',temp$device)
grepl('ip',temp_venn$device)
grep('ip',temp_venn$device)
ios=as.numeric(grepl('ip',temp_venn$device))
desktop=as.numeric(grepl('desktop',temp_venn$device))
sum(desktop)
sequence=rep(0,29154)
sequence[ios]=1
sequence[desktop]=1
sequence=!sequence
sequence=as.numeric(sequence)
install.packages("limma")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install_url("http://master.bioconductor.org/packages/release/bioc/bin/macosx/mavericks/contrib/3.1/limma_3.22.7.tgz")
library("limma", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
final=cbind(desktop,ios,sequence)
final=data.frame(desktop,ios,sequence)
View(final)
cols<-c("Red", "Green", "Blue")
vennDiagram(vennCounts(final), circle.col=cols)
ios=as.numeric(grepl('$ip',temp_venn))
ios
ios=as.numeric(grepl('$ip',temp_venn$device))
ios
sum(ios)
ios=as.numeric(grepl('^ip',temp_venn$device))
sum(ios)
ios=as.numeric(grepl('ip',temp_venn$device))
sum(ios)
ios=as.numeric(grepl('iP',temp_venn$device))
sum(ios)
ios
ios=as.numeric(grepl('iP',temp_venn$device))
desktop=as.numeric(grepl('desktop',temp_venn$device))
filter(temp$device,!grepl('desktop',temp_venn$device),!grepl('iP',temp_venn$device))
temp_venn$device[ios]='ios'
View(temp_venn)
temp_venn <- read.csv("~/Desktop/temp_venn.csv")
View(temp_venn)
str(temp_venn)
temp=temp_venn
grepl('iP',temp$device)
as.numeric(grepl('iP',temp$device)0
as.numeric(grepl('iP',temp$device))
sum(as.numeric(grepl('iP',temp$device)))
sum(as.numeric(grepl('de',temp$device)))
local=dbConnect(MySQL(),user="root",password="",host="localhost",dbname="test")
user_gs <- read.csv("~/PycharmProjects/AI Project 1 /user_gs.csv")
View(user_gs)
dbWriteTable(local,name = "user_gs",value = user_gs)
library(dplyr)
user_gs=mutate(user_gs,lasttime=as.POSIXct('2015-3-3'))
View(user_gs)
dbWriteTable(local,name = "user_gs",value = user_gs)
pnorm(q = 5/3.2,mean = 0,sd = 1)
pnorm(q = -5/3.2,mean = 0,sd = 1)
0.93^7
1-0.93^7
library(ggplot2)
final <- read.csv("~/analytics/final_rank_data.csv")
View(final)
qplot(ranking,data=final)
qplot(Ranking,data=final)
qplot(Date,Ranking,data=final)
qplot(Date,Ranking,data=final)
library(dplyr)
View(final)
arrange(final,Date)
arrange(final,Date,desc)
arrange(final,desc(Date))
str(final)
View(final)
temp=mutate(final,Date=as.POSIXct(Date))
as.Date(final$Date)
as.POSIXct(unclass(final$Date))
as.Date.factor(final$Date)
View(final)
str(final)
as.POSIXct(as.character(final$Date))
as.POSIXlt.factor(final$Date)
library(lubridate)
mdy(final$Date)
temp=mutate(final,date=mdy(final$Date))
View(temp)
temp=arrange(temp,desc(date))
View(temp)
qplot(date,Ranking,temp)
qplot(date,Ranking,data=temp)
qplot(date,Ranking,data=temp,col="blue")
qplot(date,Ranking,data=temp,color="blue")
qplot(date,Ranking,data=temp,geom=c("smooth"))
qplot(date,Ranking,data=temp,geom=c("point","smooth"))
for(i=1:10){
sample(1:2,size=1,replace=TRUE)
}
for(i in 1:10){
sample(1:2,size=1,replace=TRUE)
}
outcomes = c("heads", "tails")
for(i in 1:10){
sample(outcomes,size=1,replace=TRUE)
}
table <- read.csv("~/Desktop/table.csv")
View(table)
library(dplyr)
table=mutate(table,change=Close-Open)%>%mutate(change=ifelse(change>0,'Up','Down'))
View(table)
last=table$change[1:247]
today=table$change[2:248]
date=table$Date
date=table$Date[1:247]
final=data.frame(date,last,today)
View(final)
barplot(table(final$last))
barplot(table(final$today))
barplot(table(final$last))
barplot(table(final$last),title="PLot of the last variable")
barplot(table(final$last),main = "PLot of the last variable")
barplot(table(final$last),main = "Plot of the last variable")
barplot(table(final$today),main = "Plot of the today variable")
table(final$last)
table(today$last)
table(final$today)
table(final$today)
table(final$today,final$last)
table(final$today,final$last,dnn = c("today","last"))
table(final$today,dnn = c("today"))
write.csv(final[1:20,c(2,3)],"data.csv",row.names=F)
temp=final[1:20,c(2,3)]
View(temp)
80.88+0.1058*199
2737.77*0.31+1584.9*0.405-804.63
0.297*2913.60+0.370*1514.3-837
teamRank = c(1,2,3,3,4,4,4,4,5,5)
a2012=c(94,88,95,88,,93,94,98,97,,93,94)
a2012=c(94,88,95,88,93,94,98,97,93,94)
a2013=c(97,97,92,93,,92,96,94,96,92,90)
a2013=c(97,97,92,93,92,96,94,96,92,90)
cor(teamRank,a2012)
cor(teamRank,a2013)
play <- read.csv("~/Downloads/play.csv")
View(play)
library(dplyr)
final=select(play,US.Downloads,Search.Rank)
View(final)
colnames(final)=c("downloads","rank")
View(final)
final=select(play,Date,US.Downloads,Search.Rank)
colnames(final)=c("date",downloads","rank")
colnames(final)=c("date","downloads","rank")
View(final)
seq(0,85)
rep(0,85)
sequence=rep(0,85)
for (i in 5:85){
sequence[i]=mean(final$downloads[i:i+5])
}
final$seq=sequence
View(final)
final1=final[-c(1,2,3,4,81,82,83,84,85)]
View(final1)
final1=final[-c(1,2,3,4,81,82,83,84,85),]
View(final1)
row.names(final1)=NULL
View(final1)
model=lm(rank~downloads+seq,data=final1)
summary(model)
model=lm(rank~seq,data=final1)
summary(model)
model=lm(rank~downloads,data=final1)
summary(model)
qplot(downloads,rank,,data=final1,geom=c("point","smooth"))
library(ggpot2)
library(ggpot2)
library(ggplot2)
qplot(downloads,rank,,data=final1,geom=c("point","smooth"))
cor(final1$rank,final1$downloads)
cor(final1$rank,final1$seq)
qplot(seq,rank,data=final1,geom=c("point","smooth"))
qplot(downloads,rank,,data=final1,geom=c("point","smooth"))
qplot(1/downloads,rank,,data=final1,geom=c("point","smooth"))
qplot(1/seq,rank,data=final1,geom=c("point","smooth"))
qplot(seq,rank,data=final1,geom=c("point","smooth"))
qplot(seq,rank,data=final1,geom=c("point","smooth"))
qplot(downloads,rank,,data=final1,geom=c("point","smooth"))
final2=select(final1,downloads<100)
final2=filter(final1,downloads<100)
View(final2)
qplot(downloads,rank,,data=final2,geom=c("point","smooth"))
qplot(1/downloads,rank,,data=final2,geom=c("point","smooth"))
cor(1/final2$downloads,final2$rank)
rm(final1,final2)
canada <- read.csv("~/Downloads/canada.csv")
View(canada)
germany <- read.csv("~/Downloads/germany.csv")
View(germany)
us <- read.csv("~/Downloads/us.csv")
View(us)
us=na.omit(us)
View(us)
library(ludridate)
library(lubridate)
temp=c("us","canda","germany")
for (i in 1:3){
colnames(as.name(temp[i]))=c("date","rank")
assign(temp[i],mutate(as.name(temp[i]),date=ymd(date)))
}
colnames(as.name(temp[i]))=c("date","rank")
row.names(as.name(temp[i]))=NULL
colnames(as.name(temp[i]))=c("date","rank")
as.name(temp[i])
as.call(temp[i])
as.environment(temp[i])
get(temp[i])
row.names(get(temp[i]))=NULL
colnames(get(temp[i]))=c("a","b")
colnames(us)=c("date","rank")
colnames(canada)=c("date","rank")
colnames(germany)=c("date","rank")
us=mutate(us,date=ymd(date))
View(us)
rn(play,final)
rm(play,final)
rm(i,model,sequence)
us <- read.csv("~/Downloads/us.csv")
View(us)
colnames(us)=c("date","rank")
View(us)
View(us)
us <- read.csv("~/Downloads/us.csv")
View(us)
us=na.omit(us)
View(us)
colnames(us)=c("date","rank")
str(us)
us1=mutate(us,date=ymd_hms(date))
View(us1)
us1=mutate(us,date=ymd_hms(date))%>%mutate(date=ymd(date))
View(us1)
us1=mutate(us,date=ymd_hms(date))
View(us1)
germany1=mutate(germany,date=ymd_hms(date))
canada1=mutate(canada1,date=ymd_hms(date))
canada1=mutate(canada,date=ymd_hms(date))
View(canada1)
germany2=filter(germany1,date>'2014-10-02')
us2=filter(us1,date>'2014-10-02')
View(us2)
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
sqldf("select rank,date(date) as dt from us2 group by dt ")
us3=sqldf("select rank,date(date) as dt from us2 group by dt ")
germany3=sqldf("select rank,date(date) as dt from germany2 group by dt ")
View(germany3)
View(canada1)
canada3=sqldf("select rank,date(date) as dt from canada1 group by dt ")
View(canada3)
View(germany3)
final=merge(canada3,germany3,by="dt")
View(final)
final=merge(final,us3,by="dt")
View(final)
colnames(final)=c("date","canada","germany","us")
View(final)
qplot(canada,germany,data=final)
qplot(canada,us,data=final)
qplot(germany,us,data=final)
qplot(germany,us,data=final,geom=c("point","smooth"))
qplot(germany,us,data=final,geom=c("point","line"))
qplot(germany,us,data=final,geom=c("point","smooth"))
qplot(germany,canada,data=final,geom=c("point","smooth"))
qplot(germany,us,data=final,geom=c("point","smooth"))
cor(final$canada,final$us)
cor(final$germany,final$us)
cor(final$germany,final$us,na.rm=T)
cor(final)
cor(final[,c(2,3,4)])
final1=na.omit(final)
cor(final1[,c(2,3,4)])
write.csv(final,"rank_variation_countries.csv",row.names=F)
qplot(germany,canada,data=final,geom=c("point","smooth"))
qplot(us,canada,data=final,geom=c("point","smooth"))
cor(final1[,c(2,3,4)])
f8=dbConnect(MySQL(),user="sudokuphp",password="successlist",host="192.168.1.123",dbname="f8sudokuquest")
query=dbSendQuery(f8,"select date(starttime) as dt,count(*) as total from user_info where date(starttime)>'2015-1-1' group by date(starttime)")
data=fetch(query,n=-1)
View(data)
library(ggplot2)
qplot(dt,total,data=data)
qplot(dt,total,data=data,geom=c("point","smooth"))
e^-1
exp(-1)
exp(-1)/(1-0.3678794)
quality <- read.csv("~/Documents/Analytics Edge/Week 3/quality.csv")
View(quality)
library("caTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
set.seed(88)
split=sample.split(quality$PoorCare,SplitRatio = 0.75)
qualityTrain=subset(quality,split==TRUE)
qualityTest=subset(quality,split==FALSE)
QualityLog = glm(PoorCare ~ OfficeVisits + Narcotics, data=qualityTrain, family=binomial)
QualityLog = glm(PoorCare ~ StartedOnCombination+ProviderCount, data=qualityTrain, family=binomial)
summary(QualityLog)
install.packages("ROCR")
library("ROCR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
predictTrain=predict(QualityLog,qualityTrain)
ROCRpred=prediction(predictTrain,qualityTrain$PoorCare)
ROCRperf=performance(ROCRpred,"tpr","fpr")
plot(ROCRperf)
plot(ROCRperf,colorize=TRUE)
plot(ROCRperf,colorize=TRUE,print.cutoof.at=seq(0,1,0.1),text.adj=c(-0.2,1.7))
plot(ROCRperf,colorize=TRUE,print.cutoof.at=seq(0,1,0.1))
QualityLog = glm(PoorCare ~ OfficeVisits + Narcotics, data=qualityTrain, family=binomial)
predictTrain=predict(QualityLog,qualityTrain)
ROCRpred=prediction(predictTrain,qualityTrain$PoorCare)
auc = as.numeric(performance(ROCRpredTest, "auc")@y.values)
predictTest = predict(QualityLog, type="response", newdata=qualityTest)
ROCRpredTest = prediction(predictTest, qualityTest$PoorCare)
auc = as.numeric(performance(ROCRpredTest, "auc")@y.values)
auc
load("~/Documents/Analytics Edge/Week 4/.RData")
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rpart.plot", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
prp(CARTmodel4)
prp(CARTmodel5)
prp(CARTmodel4)
prp(CARTmodel5)
prp(CARTmodel3)
prp(CARTmodel4)
CARTmodel5
CARTmodel4
CARTmodel4
names(CARTmodel4)
abs(0.2966383-0.3400004)
predict(CARTmodel5,newdata = gerber1)
predict(CARTmodel5,newdata = gerber1,type = "response")
predict(CARTmodel5,newdata = gerber1,type = "class")
predict(CARTmodel5,newdata = gerber1,type = "prob")
prp(CARTmodel4)
prp(CARTmodel5)
CARTmodel5
View(gerber1)
glm.fit=glm(voting~sex+control,data=gerber1,family=binomial)
summary(glm.fit)
summary(glm.fit)
Possibilities = data.frame(sex=c(0,0,1,1),control=c(0,1,0,1))
predict(glm.fit, newdata=Possibilities, type="response")
CARTmodel5
abs(0.2904558-0.2908065)
gerber=gerber1
LogModel2 = glm(voting ~ sex + control + sex:control, data=gerber, family="binomial")
summary(LogModel2)
predict(LogModel2, newdata=Possibilities, type="response")
abs(0.2904558-0.2908065)
CARTmodel5
0.2904558-0.2904558
rm(list=ls())
abpr <- read.csv("~/Documents/Analytics Edge/Week 4/assignment/abpr.csv")
View(abpr)
abpr$isB=as.numeric(abpr$letter=='B')
abpr <- read.csv("~/Documents/Analytics Edge/Week 4/assignment/abpr.csv", stringsAsFactors=FALSE)
View(abpr)
abpr$isB=as.numeric(abpr$letter=='B')
library("caTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
set.seed(1000)
split=sample.split(abpr$isB,SplitRatio = 0.50)
train=subset(abpr,split==TRUE)
test=subset(abpr,split!=TRUE)
table(test$isB)
1175/1558
cart_b=rpart(isB~.-letter,data=abpr,method="class")
pred=predict(cart_b,newdata = test,type="class")
pred
table(test$isB,pred)
1471/1558
library("randomForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
set.seed(1000)
rf=randomForest(isB~.-letter,data=train)
str(train)
train$isB=as.factor(train$isB)
test$isB=as.factor(test$isB)
rf=randomForest(isB~.-letter,data=train)
pred1=predict(rf,newdata = test)
pred1
table(test$isB,pred)
1471/1558
abpr$letter=as.factor(abpr$letter)
set.seed(2000)
View(abpr)
split=sample.split(abpr$letter,SplitRatio = 0.50)
train=subset(abpr,split==TRUE)
test=subset(abpr,split!=TRUE)
table(train$letter)
sum(test$letter=="P")
sum(test$letter=="P")/1558
cart_l=rpart(letter~.-isB,data=train,method="class")
pred=predict(cart_l,newdata = train,type="class")
pred
table(abpr$letter,pred)
table(test$letter,pred)
392/1558
cart_l=rpart(letter~.-isB,data=train,method="class")
pred=predict(cart_l,newdata = test,type="class")
table(test$letter,pred)
pred1=predict(cart_l,newdata = test,type="class")
table(test$letter,pred1)
pred1=predict(cart_l,newdata = train,type="class")
table(test$letter,pred1)
1367/1558
set.seed(1000)
rf=randomForest(letter~.-isB,data=train)
pred=predict(rf,newdata = test)
pred=predict(rf,newdata = test)
table(test$letter,pred)
1527/1558
rm(list=ls())
census <- read.csv("~/Documents/Analytics Edge/Week 4/assignment/census.csv", stringsAsFactors=FALSE)
View(census)
set.seed(2000)
split=sample.split(census$over50k,SplitRatio = 0.60)
train=subset(census,split==TRUE)
test=subset(census,split!=TRUE)
View(train)
glm.fit=glm(over50k~.,data=train,family=binomial)
summary(glm.fit)
glm.fit=glm(over50k~.,data=train,family="binomial")
str(train)
census$over50k=as.factor(ifelse(census$over50k==">50k",1,0))
View(census)
census <- read.csv("~/Documents/Analytics Edge/Week 4/assignment/census.csv")
View(census)
glm.fit=glm(over50k~.,data=train,family="binomial")
glm.fit1=glm(over50k~.,data=train,family="binomial")
set.seed(2000)
split=sample.split(census$over50k,SplitRatio = 0.60)
train=subset(census,split==TRUE)
test=subset(census,split!=TRUE)
glm.fit1=glm(over50k~.,data=train,family="binomial")
summary(glm.fit1)
pred=predict(glm.fit1,newdata = test,type="response")
table(test$over50k,pred>0.50)
11139/12791
9051+1888
10139/12791
table(test$over50k)
table(test$over50k)/12791
PredictROC=predict(glm.fit1,newdata = test)
PredictROC
pred_roc=prediction(PredictROC,test$over50k)
perf=performance(pred_roc,"tpr","fpr")
plot(perf)
as.numeric(performance(pred_roc, "auc")@y.values)
model1=rpart(over50k~.,data=train,method="class")
prp(model1)
pred_tree=predict(model1,newdata = test,type"class")
pred_tree=predict(model1,newdata = test,type="class")
table(test$over50k,pred_tree)
10639/12791
pred_tree=predict(model1,newdata = test)
ROCRpred = prediction(pred_tree, test$over50k)
pred=predict(model1,newdata = test)
table(test$over50k>pred>0.5)
table(test$over50k,pred>0.5)
length(pred)
setwd("~/Documents/Analytics Edge/Week 4/assignment")
