uid=c()
amount=c()
for (i in temp){
#print (1)
if (user_info$uid[i] %in% unique(credits$uid)){
print (1)
temp_uid=user_info$uid[i]
start_date=user_info$dt_start[i]
if (start_date+days(28)>first_pay){
uid=c(uid,temp_uid)
temp_data=filter(credits1,uid==temp_uid,dt_pay<ymd(start_date)+days(28))%>%group_by(uid)%>%summarise(total=sum(amount))
amount=c(amount,temp_data$total)
}
}
}
uid=c()
total_time=c()
for (i in seq_along(user_info1$uid)){
temp_uid=user_info1$uid[i]
#temp_uid=i
#print (temp_uid)
temp_val=filter(user_gs1,uid==temp_uid)%>%group_by(uid)%>%summarise(total=sum(as.numeric(period_to_seconds(hms(timetaken)))))
uid=c(uid,user_info1$uid[i])
total_time=c(total_time,temp_val$total)
}
uid=c()
amount=c()
for (i in temp){
#print (1)
if (user_info$uid[i] %in% unique(credits$uid)){
print (1)
temp_uid=user_info$uid[i]
start_date=user_info$dt_start[i]
if (start_date+days(28)>first_pay){
uid=c(uid,temp_uid)
temp_data=filter(credits1,uid==temp_uid)%>%group_by(uid)%>%summarise(total=sum(amount))
amount=c(amount,temp_data$total)
}
}
}
uid=c()
amount=c()
for (i in temp){
#print (1)
if (user_info$uid[i] %in% unique(credits$uid)){
print (1)
temp_uid=user_info$uid[i]
start_date=user_info$dt_start[i]
uid=c(uid,temp_uid)
temp_data=filter(credits1,uid==temp_uid)%>%group_by(uid)%>%summarise(total=sum(amount))
amount=c(amount,temp_data$total)
}
}
temp=data.frame(uid,amount)
View(temp)
load("~/Documents/Analytics Edge/Week 5/.RData")
corpus = tm_map(corpus, stemDocument)
library("tm", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
corpus = tm_map(corpus, stemDocument)
dtm = DocumentTermMatrix(corpus)
dtm
dtm=removeSparseTerms(dtm,0.95)
dtm
emailSparse=as.data.frame(as.matrix(dtm))
names(emailSparse)[which.max(apply(emailSparse,MARGIN = 2,FUN = sum))]
emailSparse$spam=emails$spam
sum(apply(subset(emailSparse,spam==0),MARGIN = 2,FUN = sum)>5000)
sum(apply(subset(emailSparse,spam==0),MARGIN = 2,FUN = sum)>1000)
sum(apply(subset(emailSparse,spam==1),MARGIN = 2,FUN = sum)>1000)
sum(apply(subset(emailSparse,spam==1),MARGIN = 2,FUN = sum)>=1000)
apply(subset(emailSparse,spam==1),MARGIN = 2,FUN = sum)
apply(subset(emailSparse,spam==1),MARGIN = 2,FUN = sum)>1000
sum(apply(subset(emailSparse,spam==1),MARGIN = 2,FUN = sum)>1000)
View(emailSparse)
sort(colSums(subset(emailsSparse, spam == 1)))
sort(colSums(subset(emailSparse, spam == 1)))
library9dplyr
library(dplyr)
emailSparse=mutate(emailSparse,spam=as.factor(spam))
set.seed(123)
library("caTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
smp=sample.split(emailSparse$spam,SplitRatio = 0.7)
train=subet(emailSparse,smp==TRUE)
train=subset(emailSparse,smp==TRUE)
test=subset(emailSparse,smp!=TRUE)
log.model=glm(spam~.,data=train,family="binomial")
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rpart.plot", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
tree.model=rpart(spam~.,data=train,method="class")
library("randomForest", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
rf.model=randomForest(spam~.,data=train)
which(colnames(emailSparse)=="spam")
row.names(emailSparse)=NULL
View(emailSparse)
View(emailSparse)
colnames(emailSparse)
rf.model=randomForest(spam~.,data=train)
rf.model=randomForest(spam~-000.,data=train)
str(emailSparse)
pred.log=predict(log.model,newdata = train,type = "prob")
pred.log=predict(log.model,newdata = train)
pred.log
pred.log=predict(log.model,newdata = train,type="response")
pred.log
sum(pred.log<0.00001)
sum(pred.log>0.99999)
summary(log.model)
prp(tree.model)
4000/4010
predROCR=prediction(pred.log,train$spam)
library("ROCR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
predROCR=prediction(pred.log,train$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
performance(predROCR, "auc")@y.values     #extract "auc" from the performance object and get @y.values as the auc
pred.tree=predict(tree.model,newdata = train)
pred.tree
table(train$spam,pred.tree[,2]>0.5)
3779/4010
predROCR=prediction(pred.tree[,2],train$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
performance(predROCR, "auc")@y.values     #extract "auc" from the performance object and get @y.values as the auc
set.seed(123)
rf.model=randomForest(spam~.,data=train)
View(train)
pred.test=predict(log.model,newdata = test,type="response")
table(test$spam,pred.test>0.5)
1633/1718
predROCR=prediction(pred.test,train$spam)
predROCR=prediction(pred.test,test$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
performance(predROCR, "auc")@y.values     #extract "auc" from the performance object and get @y.values as the auc
pred.test=predict(tree.model,newdata = test)
table(test$spam,pred.test[,2]>0.5)
1614/1710
predROCR = prediction(pred.test[,2], test$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
performance(predROCR, "auc")@y.values
wordCount=rowsum(as.matrix(dtm))
wordCount = rowSums(as.matrix(dtm))
karthik2 <- read.csv("~/Downloads/karthik2.csv")
View(karthik2)
library(ggplot2)
qplot(karthik2$temp)
qplot(1:453,karthik2$temp)
qplot(1:100,karthik2$temp[1:100])
qplot(1:100,karthik2$temp[1:100],"b+")
max(karthik2$temp)
median(karthik2$temp)
ggplot(data=karthik2,aes(x=1:100,y=karthik2$temp[1:100]))+geom_line()
ggplot(data=karthik2,aes(x=1:453,y=karthik2$temp))+geom_line()
ggplot(data=karthik2,aes(x=1:100,y=karthik2$temp[1:100]))+geom_line()
karthik2$temp[1:100]
1:100
ggplot(data=karthik2,aes(x=1:100,y=karthik2$temp[1:100]))+geom_line()
ggplot(data=karthik2[1:100,],aes(x=1:100,y=temp))+geom_line()
ggplot(data=karthik2[1:100,],aes(x=1:100,y=temp))+geom_abline()
ggplot(data=karthik2[1:100,],aes(x=1:100,y=temp))+geom_line()
which.max(karthik2$temp)
ggplot(data=karthik2[1:100,],aes(x=1:100,y=temp))
ggplot(data=karthik2[1:100,],aes(x=1:100,y=temp))+geom_line()
ggplot(data=karthik2[1:100,],aes(x=1:100,y=c(temp,total_users))+geom_line()
)))))
ggplot(data=karthik2[1:100,],aes(x=1:100,y=temp))+geom_line()
ggplot(data=karthik2[1:100,],aes(x=1:100,y=temp,col="red"))+geom_line()
rm(karthik2)
user_after <- read.csv("~/Desktop/user_after.csv", stringsAsFactors=FALSE)
View(user_after)
user_before <- read.csv("~/Desktop/user_before.csv", stringsAsFactors=FALSE)
View(user_before)
milestone <- read.csv("~/Desktop/milestone.csv")
View(milestone)
user_before1=merge(user_before,milestone,by.x = "milestone",by.y = "milestone_id")
View(user_before1)
user_after1=merge(user_after,milestone,by.x = "milestone",by.y = "milestone_id")
user_before1[,1]=NULL
user_after1[,1]=NULL
View(user_after1)
user_after1=filter(user_after1,device=="desktop")
View(user_after1)
filter(user_after1,device=="desktop")
subset(user_after1,device=="desktop")
user_after1=subset(user_after1,device=="desktop")
View(user_after1)
user_before1=subset(user_after1,device=="desktop")
View(user_before1)
sum(user_before$device=="desktop")
sum(user_before1$device=="desktop")
rm(user_after1,user_before1)
View(user_after)
View(milestone)
user_before=merge(user_before,milestone,by.x="milestone",by.y="milestone_id")
user_after=merge(user_after,milestone,by.x="milestone",by.y="milestone_id")
user_before[,1]=NULL
user_after[,1]=NULL
View(user_after)
View(user_after)
View(user_before)
filter(user_before,device=="desktop")
str(user_after)
filter(user_before,device="desktop")
filter(user_before,device=="desktop")
user_before=subset(user_before,device=="desktop")
user_after=subset(user_after,device=="desktop")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
max_mile_before=group_by(user_before,uid)%>%summarise(max_mile=max(milestone))
View(max_mile_before)
max_mile_after=group_by(user_after,uid)%>%summarise(max_mile=max(milestone))
mean(max_mile_after$max_mile)
mean(max_mile_before$max_mile)
max_mile_before_count=group_by(max_mile)%>%summarise(total=length(uid))
max_mile_before_count=group_by(max_mile_before,max_mile)%>%summarise(total=length(uid))
View(max_mile_before_count)
max_mile_after_count=group_by(max_mile_after,max_mile)%>%summarise(total=length(uid))
View(max_mile_before_count)
View(max_mile_after_count)
max_mile_after_count=group_by(max_mile_after,max_mile)%>%summarise(total=length(uid))%>%arrange(desc(max_mile))
max_mile_before_count=group_by(max_mile_before,max_mile)%>%summarise(total=length(uid))%>%arrange(desc(max_mile))
View(max_mile_after_count)
View(max_mile_before_count)
mutate(max_mile_after_count,cumulative=cumsum(total))%>%mutate(conversion=c(0,cumulative[1:439]/cumulative[2:440]))
mutate(max_mile_after_count,cumulative=cumsum(total))
mutate(max_mile_after_count,cumulative=cumsum(total))%>%mutate(conversion=c(0,cumulative[1:439]/cumulative[2:440]))
mutate(max_mile_after_count,cumulative=cumsum(total))%>%mutate(conversion=c(0,cumulative[1:441]/cumulative[2:442]))
mutate(max_mile_after_count,cumulative=cumsum(total))%>%mutate(conversion=c(0,cumulative[1:441]/cumulative[2:442]))%>%arrange(max_mile)
max_mile_after_conversion=mutate(max_mile_after_count,cumulative=cumsum(total))%>%mutate(conversion=c(0,cumulative[1:441]/cumulative[2:442]))%>%arrange(max_mile)
max_mile_before_conversion=mutate(max_mile_before_count,cumulative=cumsum(total))%>%mutate(conversion=c(0,cumulative[1:441]/cumulative[2:442]))%>%arrange(max_mile)
max_mile_before_conversion=mutate(max_mile_before_count,cumulative=cumsum(total))%>%mutate(conversion=c(0,cumulative[1:439]/cumulative[2:440]))%>%arrange(max_mile)
View(max_mile_after_conversion)
View(max_mile_before_conversion)
rm(list=ls())
user_before <- read.csv("~/Desktop/user_before.csv", stringsAsFactors=FALSE)
View(user_before)
milestone <- read.csv("~/Desktop/milestone.csv", stringsAsFactors=FALSE)
View(milestone)
before=merge(user_before,milestone,by.x="milestone_uid",by.y="milestone_id")
View(user_before)
before=merge(user_before,milestone,by.x="milestone",by.y="milestone_id")
user_after <- read.csv("~/Desktop/user_after.csv", stringsAsFactors=FALSE)
View(user_after)
after=merge(user_after,milestone,by.x="milestone",by.y="milestone_id")
before[,1]=NULL
after[,1]=NULL
group_by(before,uid)%>%summarise(max_mile=max(milestone))%>%group_by(milestone)
group_by(before,uid)%>%summarise(max_mile=max(milestone))
group_by(before,uid)%>%summarise(max_mile=max(milestone))%>%group_by(max_mile)%>%summarise(total=length(uid))
group_by(before,uid)%>%summarise(max_mile=max(milestone))%>%group_by(max_mile)%>%summarise(total=length(uid))%>%arrange(desc(max_mile))%>%mutate(cumulative=cumsum(total))%>%arrange(max_mile)
before=group_by(before,uid)%>%summarise(max_mile=max(milestone))%>%group_by(max_mile)%>%summarise(total=length(uid))%>%arrange(desc(max_mile))%>%mutate(cumulative=cumsum(total))%>%arrange(max_mile)
after=group_by(after,uid)%>%summarise(max_mile=max(milestone))%>%group_by(max_mile)%>%summarise(total=length(uid))%>%arrange(desc(max_mile))%>%mutate(cumulative=cumsum(total))%>%arrange(max_mile)
View(before)
View(after)
View(before)
mutate(before,conversion=c(0,cumulative[2:87]/cumulative[1:86]))
before=mutate(before,conversion=c(0,cumulative[2:87]/cumulative[1:86]))
after=mutate(after,conversion=c(0,cumulative[2:dim(after)[1]]/cumulative[1:(dim(after)[1]-1)]))
View(after)
View(before)
write.csv(after,"after.csv",row.names=F)
write.csv(before,"before.csv",row.names=F)
before$conversion-after$conversion>0
sum(before$conversion-after$conversion>0)
after$conversion[1:10]>=before$conversion[1:10]
after$conversion[1:50]>=before$conversion[1:50]
sum(after$conversion[1:50]>=before$conversion[1:50])
rm(list=ls())
milestone <- read.csv("~/Desktop/milestone.csv", stringsAsFactors=FALSE)
View(milestone)
milestone[["milestone_id"]]
source('~/.active-rstudio-document')
milestone_munging(milestone)
milestone[["one"]]=rep(0,474)
milestone$one=NULL
milestone_munging(milestone)
source('~/.active-rstudio-document')
milestone_munging(milestone)
user_gs <- read.csv("~/Desktop/user_gs.csv", stringsAsFactors=FALSE)
View(user_gs)
eval(as.name("milestone"))
eval(as.symbol("milestone"))
milestone1=milestone_munging(milestone)
View(milestone1)
View(user_gs)
source('~/.active-rstudio-document')
user_gs_munging(user_gs[1:100,])
source('~/.active-rstudio-document')
user_gs_munging(user_gs[1:100,])
source('~/.active-rstudio-document')
user_gs_munging(user_gs[1:100,])
user_gs_munging(user_gs[1:100,])
View(milestone)
total_user <- read.csv("~/Desktop/total_user.csv", stringsAsFactors=FALSE)
View(total_user)
amount_paid <- read.csv("~/Desktop/amount_paid.csv", stringsAsFactors=FALSE)
View(amount_paid)
avg_attempts=mutate(merge(amount_paid,total_user,by="curr_milestone"),avg_revenue=(amount_paid/total_payers))%>%select(curre_milestone,avg_revenue)
avg_attempts=mutate(merge(amount_paid,total_user,by="curr_milestone"),avg_revenue=(amount_paid/total_payers))%>%select(curr_milestone,avg_revenue)
rm(amount_paid,total_user)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
final_munging(milestone,user_gs,avg_attempts)
milestone=milestone_munging(milestone)
avg_attempts=user_gs_munging(user_gs)
final=merge(milestone,avg_attempts,by.x = "milestone_id",by.y = "milestone")
merge(final,avg_attempts,by.x="milestone",by.y="curr_milestone")
View(final)
merge(final,avg_attempts,by.x="milestone_id",by.y="curr_milestone")
avg_revenue=mutate(merge(amount_paid,total_user,by="curr_milestone"),avg_revenue=(amount_paid/total_payers))%>%select(curr_milestone,avg_revenue)
total_user <- read.csv("~/Desktop/total_user.csv", stringsAsFactors=FALSE)
View(total_user)
amount_paid <- read.csv("~/Desktop/amount_paid.csv", stringsAsFactors=FALSE)
View(amount_paid)
avg_revenue=mutate(merge(amount_paid,total_user,by="curr_milestone"),avg_revenue=(amount_paid/total_payers))%>%select(curr_milestone,avg_revenue)
merge(final,avg_revenue,by.x="milestone_id",by.y="curr_milestone")
rm(avg_attempts,total_user)
source('~/.active-rstudio-document')
final_munging(milestone,user_gs,avg_revenue)
milestone=milestone_munging(milestone)
avg_attempts=user_gs_munging(user_gs)
final=merge(milestone,avg_attempts,by.x = "milestone_id",by.y = "milestone")
merge(final,avg_revenue,by.x="milestone",by.y="curr_milestone")
View(avg_revenue)
final
final
str(avg_revenue)
merge(final,avg_revenue,by.x = "milestone_id",by.y = "curr_milestone")
View(final)
final=merge(final,avg_revenue,by.x = "milestone_id",by.y = "curr_milestone")
View(final)
rm(avg_attempts,milestone1,user_gs)
rm(amount_paid)
rm(avg_revenue)
View(final)
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(rpart)
library(rpart.plot)
library(caret)
View(final)
library(caret)
first_100=filter(final,milestone>=100)
first_100=mutate(first_100,y=ifelse(avg_revenue>median(avg_revenue),1,0))%>%select(four:ol_3,avg_attempts,y)
trainfn=trainControl(method="cv",number=10)
cpGrid = expand.grid( .cp = seq(0.01,0.5,0.01))
train(y~.-avg_attempts,data = first_100, method = "rpart", trControl = trianfn, tuneGrid = cpGrid )
library(caret)
first_100=filter(final,milestone>=100)
first_100=mutate(first_100,y=ifelse(avg_revenue>median(avg_revenue),1,0))%>%select(four:ol_3,avg_attempts,y)
trainfn=trainControl(method="cv",number=10)
cpGrid = expand.grid( .cp = seq(0.01,0.5,0.01))
train(y~.-avg_attempts,data = first_100, method = "rpart", trControl = trainfn, tuneGrid = cpGrid )
str(first_100)
View(first_100)
first_100=filter(final,milestone<=100)
first_100=mutate(first_100,y=ifelse(avg_revenue>median(avg_revenue),1,0))%>%select(four:ol_3,avg_attempts,y)
View(first_100)
str(first_100)
first_100=filter(final,milestone<=100)
first_100=mutate(first_100,y=as.numeric(ifelse(avg_revenue>median(avg_revenue),1,0)))%>%select(four:ol_3,avg_attempts,y)
trainfn=trainControl(method="cv",number=10)
cpGrid = expand.grid( .cp = seq(0.01,0.5,0.01))
train(y~.-avg_attempts,data = first_100, method = "rpart", trControl = trainfn, tuneGrid = cpGrid )
str(first_100)
first_100=mutate(first_100,y=as.factor(ifelse(avg_revenue>median(avg_revenue),1,0)))%>%select(four:ol_3,avg_attempts,y)
first_100=filter(final,milestone<=100)
first_100=mutate(first_100,y=as.factor(ifelse(avg_revenue>median(avg_revenue),1,0)))%>%select(four:ol_3,avg_attempts,y)
trainfn=trainControl(method="cv",number=10)
cpGrid = expand.grid( .cp = seq(0.01,0.5,0.01))
train(y~.-avg_attempts,data = first_100, method = "rpart", trControl = trainfn, tuneGrid = cpGrid )
first_100_tree=rpart(y~.-avg_attempts,data=first_100,method="class",cp=0.1)
rpart.plot(first_100_tree)
predict(first_100_tree)
table(first_100_tree$y,predict(first_100_tree)[,2]>0.5)
sum(first_100$six0
)
sum(first_100$six)
sum(first_100$ol_3)
first_100_tree=rpart(y~.avg_attempts,data=first_100,method="class")
first_100_tree=rpart(y~avg_attempts,data=first_100,method="class")
rpart.plot(first_100_tree)
train(y~avg_attempts,data = first_100, method = "rpart", trControl = trainfn, tuneGrid = cpGrid )
first_100_tree=rpart(y~avg_attempts,data=first_100,method="class",cp=0.33)
rpart.plot(first_100_tree)
predict(first_100_tree)
table(first_100$y,predict(first_100_tree)[,2]>0.5)
rm(cpGrid,final,first_100,milestone)
rm(first_100_tree,trainfn)
group1=rnorm(200,32,1)
group2=rnorm(200,0,1)
final=c(group1,group2)
smp=sample(x = c(T,F),size = 400,replace = T)
final1=final[smp]
final2=final[!smp]
mean(final1)
mean(final2)
sqrt(0.25/100)
0.12+2*0.05
sqrt(0.16/3326)
sqrt((0.24*0.76)/3326)
(0.05*0.93)/(0.05*0.93+0.95*0.03)
(23/30)*1.33
(23*40/30)
(23*40/30)+27
(23*40/30)+27+(60*30)/74
617*150+238*16
617*166
617*50+238*116
time <- read.csv("~/Desktop/t.csv", stringsAsFactors=FALSE)
View(time)
library(dplyr)
select(time,milestone_num:played_bfr)%>%select(-time_since_last_move)
time1=select(time,milestone_num:played_bfr)%>%select(-time_since_last_move)
View(time1)
payers <- read.table("~/Desktop/payers.csv", header=TRUE, quote="\"", stringsAsFactors=FALSE)
View(payers)
mtuate(time,payer=ifelse((uid %in% payers$payers),1,0))
mutate(time,payer=ifelse((uid %in% payers$payers),1,0))
time=mutate(time,payer=ifelse((uid %in% payers$payers),1,0))
View(time)
time1=select(time,milestone_num:payer)%>%select(-time_since_last_move)
View(time1)
time <- read.csv("~/Desktop/t.csv", stringsAsFactors=FALSE)
View(time)
source('~/.active-rstudio-document')
data_munging(time,payers)
temp=data_munging(time,payers)
View(temp)
train <- read.csv("~/Documents/R Directory/Kaggle/West Nile Virus/train.csv", stringsAsFactors=FALSE)
View(train)
test <- read.csv("~/Documents/R Directory/Kaggle/West Nile Virus/test.csv", stringsAsFactors=FALSE)
View(test)
spray <- read.csv("~/Documents/R Directory/Kaggle/West Nile Virus/spray.csv", stringsAsFactors=FALSE)
View(spray)
View(test)
View(train)
table(train$WnvPresent)
unique(time)
unique(time$uid)
weather <- read.csv("~/Documents/Python/Untitled Folder/weather.csv", stringsAsFactors=FALSE)
View(weather)
rm(payers,spray,temp,test,weather)
rm(train)
final=data_munging(time)
payers <- read.table("~/Documents/R Directory/game design/game state prediction/payers.csv", header=TRUE, quote="\"", stringsAsFactors=FALSE)
View(payers)
final=data_munging(time,payers)
View(final)
final=select(final,milestone_num:time)%>%select(-time_since_last_move)
View(final)
install.packages("mcmc")
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rpart.plot", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
View(final)
str(final)
source('~/.active-rstudio-document')
final=data_munging(time,payers)
View(final)
final=select(final,milestone_num:time)%>%select(-time_since_last_move)
time.tree=rpart(time~.,method="class")
time.tree=rpart(time~.,method="class",data=final)
plot(time.tree)
prp(time.tree)
library(caret)
numFolds = trainControl( method = "cv", number = 10 )
cpGrid = expand.grid( .cp = seq(0.01,0.5,0.01)) # this tells me the grid of values where i want to evaluate my model
train=(time~.,data=final,method="rpart",trControl=numFolds,tuneGrid = cpGrid)
train(time~.,data=final,method="rpart",trControl=numFolds,tuneGrid = cpGrid)
time.tree=rpart(time~.,method="class",data=final,cp=0.02)
prp(time.tree)
install.packages("lpSolveAPI")
install.packages("lpSolveAPI")
install.packages("lpSolve")
install.packages("acc")
install.packages("lpSolveAPI")
library("XLConnect", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
data=readWorksheet(loadWorkbook("Investment.xlsx"),sheet=1)
View(data)
data[4:12,2:6]
data=data[4:12,2:6]
View(data)
row.names(data)=NULL
setwd("~/Documents/Analytics Edge")
setwd("~/Documents/Analytics Edge/Week 8")
colnames(data)=data[1,]
View(data)
data=data[-1,]
View(data)
row.names(data)=NULL
View(data)
(50*(data[7,5]-data[7,3])*0.70)-5
str(data)
library(dplyr)
data$Number of Shares=as.numeric(data$Number of Shares)
data[["Number of Shares"]]=as.numeric(data[["Number of Shares""]])
)
as.numeric(data[["Number of Shares""]])
)))
data[["Number of Shares""]]
colnames(data)=c("stock","no_shares","last_price","current_price","next_price")
View(data)
data$no_shares=as.numeric(data$no_shares)
data$next_price=as.numeric(data$next_price)
data$last_price=as.numeric(data$last_price)
data$current_price=as.numeric(data$current_price)
data$next_price=as.numeric(data$next_price)
str(data)
(50*(data[7,5]-data[7,3])*0.70)-5
(50*(data[7,4]-data[7,3])*0.70)-5
50*(23.67-22.54)
50*(23.67-22.54)*0.30
23.67*50*0.01
56.5-16.95-11.835
data=mutate(data,diff=current_price-last_price)
View(data)
